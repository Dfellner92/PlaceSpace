{"ast":null,"code":"import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true; // now we find if all forms are valid, \n      // for-in loop b/c inputs state is object\n\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { //make copy of initial state\n        ...state,\n        // now update\n        inputs: { ...state.inputs,\n          // eg when title comes in as action.inputId, \n          // it will update the value and isValid\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  //calls formReducer and passes initial state\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  }); // manages validity and values of form portions\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, [dispatch]);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n  return [formState, inputHandler, setFormData];\n};","map":{"version":3,"sources":["/Users/danielfellner/Desktop/postBootcampProjects/Frontend/src/shared/hooks/form-hook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialFormValidity","formState","dispatch","inputHandler","id","setFormData","inputData","formValidity"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,UAAIC,WAAW,GAAG,IAAlB,CADJ,CAEI;AACA;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAChC,YAAI,CAACL,KAAK,CAACK,MAAN,CAAaD,OAAb,CAAL,EAA4B;AACxB;AACH;;AACD,YAAIA,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC5BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACH,SAFD,MAEO;AACHH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACH;AACJ;;AAED,aAAO,EACH;AACA,WAAGN,KAFA;AAGH;AACAK,QAAAA,MAAM,EAAE,EACJ,GAAGL,KAAK,CAACK,MADL;AAEJ;AACA;AACA,WAACJ,MAAM,CAACG,OAAR,GAAkB;AAAEG,YAAAA,KAAK,EAAEN,MAAM,CAACM,KAAhB;AAAuBD,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAAvC;AAJd,SAJL;AAUHA,QAAAA,OAAO,EAAEH;AAVN,OAAP;;AAYJ,SAAK,UAAL;AACI,aAAO;AACHE,QAAAA,MAAM,EAAEJ,MAAM,CAACI,MADZ;AAEHC,QAAAA,OAAO,EAAEL,MAAM,CAACE;AAFb,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAlCR;AAoCH,CArCD;;AAuCA,OAAO,MAAMQ,OAAO,GAAG,CAACC,aAAD,EAAgBC,mBAAhB,KAAwC;AAC3D;AACA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBd,UAAU,CAACC,WAAD,EAAc;AAClDM,IAAAA,MAAM,EAAEI,aAD0C;AAElDH,IAAAA,OAAO,EAAEI;AAFyC,GAAd,CAAxC,CAF2D,CAO3D;;AACA,QAAMG,YAAY,GAAGhB,WAAW,CAAC,CAACiB,EAAD,EAAKP,KAAL,EAAYD,OAAZ,KAAwB;AACrDM,IAAAA,QAAQ,CAAC;AACLV,MAAAA,IAAI,EAAE,cADD;AAELK,MAAAA,KAAK,EAAEA,KAFF;AAGLD,MAAAA,OAAO,EAAEA,OAHJ;AAILF,MAAAA,OAAO,EAAEU;AAJJ,KAAD,CAAR;AAMH,GAP+B,EAO7B,CAACF,QAAD,CAP6B,CAAhC;AASA,QAAMG,WAAW,GAAGlB,WAAW,CAAC,CAACmB,SAAD,EAAYC,YAAZ,KAA6B;AACzDL,IAAAA,QAAQ,CAAC;AACLV,MAAAA,IAAI,EAAE,UADD;AAELG,MAAAA,MAAM,EAAEW,SAFH;AAGLb,MAAAA,WAAW,EAAEc;AAHR,KAAD,CAAR;AAKH,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACN,SAAD,EAAYE,YAAZ,EAA0BE,WAA1B,CAAP;AACH,CA1BM","sourcesContent":["import { useCallback, useReducer } from 'react';\n\n\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n            let formIsValid = true;\n            // now we find if all forms are valid, \n            // for-in loop b/c inputs state is object\n            for (const inputId in state.inputs) {\n                if (!state.inputs[inputId]) {\n                    continue;\n                }\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n\n            return {\n                //make copy of initial state\n                ...state,\n                // now update\n                inputs: {\n                    ...state.inputs,\n                    // eg when title comes in as action.inputId, \n                    // it will update the value and isValid\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\n                },\n                isValid: formIsValid\n            };\n        case 'SET_DATA':\n            return {\n                inputs: action.inputs,\n                isValid: action.formIsValid\n            };\n        default: \n            return state;\n    }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n    //calls formReducer and passes initial state\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n    });\n\n    // manages validity and values of form portions\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: 'INPUT_CHANGE', \n            value: value, \n            isValid: isValid, \n            inputId: id \n        });\n    }, [dispatch]);\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formIsValid: formValidity\n        });\n    }, []);\n\n    return [formState, inputHandler, setFormData]\n};\n"]},"metadata":{},"sourceType":"module"}