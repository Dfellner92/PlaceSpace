{"ast":null,"code":"import _slicedToArray from\"/Users/danielfellner/Desktop/postBootcampProjects/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Users/danielfellner/Desktop/postBootcampProjects/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/danielfellner/Desktop/postBootcampProjects/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useCallback,useReducer}from'react';var formReducer=function formReducer(state,action){switch(action.type){case'INPUT_CHANGE':var formIsValid=true;// now we find if all forms are valid, \n// for-in loop b/c inputs state is object\nfor(var inputId in state.inputs){if(!state.inputs[inputId]){continue;}if(inputId===action.inputId){formIsValid=formIsValid&&action.isValid;}else{formIsValid=formIsValid&&state.inputs[inputId].isValid;}}return _objectSpread(_objectSpread({},state),{},{// now update\ninputs:_objectSpread(_objectSpread({},state.inputs),{},_defineProperty({},action.inputId,{value:action.value,isValid:action.isValid})),isValid:formIsValid});case'SET_DATA':return{inputs:action.inputs,isValid:action.formIsValid};default:return state;}};export var useForm=function useForm(initialInputs,initialFormValidity){//calls formReducer and passes initial state\nvar _useReducer=useReducer(formReducer,{inputs:initialInputs,isValid:initialFormValidity}),_useReducer2=_slicedToArray(_useReducer,2),formState=_useReducer2[0],dispatch=_useReducer2[1];// manages validity and values of form portions\nvar inputHandler=useCallback(function(id,value,isValid){dispatch({type:'INPUT_CHANGE',value:value,isValid:isValid,inputId:id});},[dispatch]);var setFormData=useCallback(function(inputData,formValidity){dispatch({type:'SET_DATA',inputs:inputData,formIsValid:formValidity});},[]);return[formState,inputHandler,setFormData];};","map":{"version":3,"sources":["/Users/danielfellner/Desktop/postBootcampProjects/Frontend/src/shared/hooks/form-hook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialFormValidity","formState","dispatch","inputHandler","id","setFormData","inputData","formValidity"],"mappings":"ohBAAA,OAASA,WAAT,CAAsBC,UAAtB,KAAwC,OAAxC,CAIA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACnC,OAAQA,MAAM,CAACC,IAAf,EACI,IAAK,cAAL,CACI,GAAIC,CAAAA,WAAW,CAAG,IAAlB,CACA;AACA;AACA,IAAK,GAAMC,CAAAA,OAAX,GAAsBJ,CAAAA,KAAK,CAACK,MAA5B,CAAoC,CAChC,GAAI,CAACL,KAAK,CAACK,MAAN,CAAaD,OAAb,CAAL,CAA4B,CACxB,SACH,CACD,GAAIA,OAAO,GAAKH,MAAM,CAACG,OAAvB,CAAgC,CAC5BD,WAAW,CAAGA,WAAW,EAAIF,MAAM,CAACK,OAApC,CACH,CAFD,IAEO,CACHH,WAAW,CAAGA,WAAW,EAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD,CACH,CACJ,CAED,sCAEON,KAFP,MAGI;AACAK,MAAM,gCACCL,KAAK,CAACK,MADP,wBAIDJ,MAAM,CAACG,OAJN,CAIgB,CAAEG,KAAK,CAAEN,MAAM,CAACM,KAAhB,CAAuBD,OAAO,CAAEL,MAAM,CAACK,OAAvC,CAJhB,EAJV,CAUIA,OAAO,CAAEH,WAVb,GAYJ,IAAK,UAAL,CACI,MAAO,CACHE,MAAM,CAAEJ,MAAM,CAACI,MADZ,CAEHC,OAAO,CAAEL,MAAM,CAACE,WAFb,CAAP,CAIJ,QACI,MAAOH,CAAAA,KAAP,CAlCR,CAoCH,CArCD,CAuCA,MAAO,IAAMQ,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,aAAD,CAAgBC,mBAAhB,CAAwC,CAC3D;AAD2D,gBAE7BZ,UAAU,CAACC,WAAD,CAAc,CAClDM,MAAM,CAAEI,aAD0C,CAElDH,OAAO,CAAEI,mBAFyC,CAAd,CAFmB,4CAEpDC,SAFoD,iBAEzCC,QAFyC,iBAO3D;AACA,GAAMC,CAAAA,YAAY,CAAGhB,WAAW,CAAC,SAACiB,EAAD,CAAKP,KAAL,CAAYD,OAAZ,CAAwB,CACrDM,QAAQ,CAAC,CACLV,IAAI,CAAE,cADD,CAELK,KAAK,CAAEA,KAFF,CAGLD,OAAO,CAAEA,OAHJ,CAILF,OAAO,CAAEU,EAJJ,CAAD,CAAR,CAMH,CAP+B,CAO7B,CAACF,QAAD,CAP6B,CAAhC,CASA,GAAMG,CAAAA,WAAW,CAAGlB,WAAW,CAAC,SAACmB,SAAD,CAAYC,YAAZ,CAA6B,CACzDL,QAAQ,CAAC,CACLV,IAAI,CAAE,UADD,CAELG,MAAM,CAAEW,SAFH,CAGLb,WAAW,CAAEc,YAHR,CAAD,CAAR,CAKH,CAN8B,CAM5B,EAN4B,CAA/B,CAQA,MAAO,CAACN,SAAD,CAAYE,YAAZ,CAA0BE,WAA1B,CAAP,CACH,CA1BM","sourcesContent":["import { useCallback, useReducer } from 'react';\n\n\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n            let formIsValid = true;\n            // now we find if all forms are valid, \n            // for-in loop b/c inputs state is object\n            for (const inputId in state.inputs) {\n                if (!state.inputs[inputId]) {\n                    continue;\n                }\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n\n            return {\n                //make copy of initial state\n                ...state,\n                // now update\n                inputs: {\n                    ...state.inputs,\n                    // eg when title comes in as action.inputId, \n                    // it will update the value and isValid\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\n                },\n                isValid: formIsValid\n            };\n        case 'SET_DATA':\n            return {\n                inputs: action.inputs,\n                isValid: action.formIsValid\n            };\n        default: \n            return state;\n    }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n    //calls formReducer and passes initial state\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n    });\n\n    // manages validity and values of form portions\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: 'INPUT_CHANGE', \n            value: value, \n            isValid: isValid, \n            inputId: id \n        });\n    }, [dispatch]);\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formIsValid: formValidity\n        });\n    }, []);\n\n    return [formState, inputHandler, setFormData]\n};\n"]},"metadata":{},"sourceType":"module"}