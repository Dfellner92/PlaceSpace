{"ast":null,"code":"import { useState, useCallback, useEffect } from 'react';\nlet logoutTimer;\nexport const useAuth = () => {\n  const [token, setToken] = useState(false);\n  const [tokenExpirationDateState, setTokenExpirationDateState] = useState();\n  const [userId, setUserId] = useState(false);\n  const login = useCallback((uid, token, expirationDate) => {\n    setToken(token);\n    setUserId(uid);\n    const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n    setTokenExpirationDateState(tokenExpirationDate);\n    localStorage.setItem('userData', JSON.stringify({\n      userId: uid,\n      token: token,\n      expiration: tokenExpirationDate.toISOString()\n    }));\n  }, []);\n  const logout = useCallback(() => {\n    setToken(null);\n    setTokenExpirationDateState(null);\n    setUserId(null);\n    localStorage.removeItem('userData');\n  }, []);\n  useEffect(() => {\n    if (token && tokenExpirationDateState) {\n      const remainingTime = tokenExpirationDateState.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDateState]); // make sure useEffect is after login,\n  // still synchronous\n\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem('userData'));\n\n    if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\n      login(storedData.userId, storedData.token, new Date(storedData.expiration));\n    }\n  }, [login]);\n  return {\n    token,\n    login,\n    logout,\n    userId\n  };\n};","map":{"version":3,"sources":["/Users/danielfellner/Desktop/postBootcampProjects/Frontend/src/shared/hooks/auth-hook.js"],"names":["useState","useCallback","useEffect","logoutTimer","useAuth","token","setToken","tokenExpirationDateState","setTokenExpirationDateState","userId","setUserId","login","uid","expirationDate","tokenExpirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","logout","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AAEA,IAAIC,WAAJ;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACO,wBAAD,EAA2BC,2BAA3B,IAA0DR,QAAQ,EAAxE;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMW,KAAK,GAAGV,WAAW,CAAC,CAACW,GAAD,EAAMP,KAAN,EAAaQ,cAAb,KAAgC;AACxDP,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAK,IAAAA,SAAS,CAACE,GAAD,CAAT;AACA,UAAME,mBAAmB,GAAGD,cAAc,IAAI,IAAIE,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,OAAO,EAAP,GAAY,EAA5C,CAA9C;AACAR,IAAAA,2BAA2B,CAACM,mBAAD,CAA3B;AACAG,IAAAA,YAAY,CAACC,OAAb,CACE,UADF,EAEEC,IAAI,CAACC,SAAL,CAAe;AACbX,MAAAA,MAAM,EAAEG,GADK;AAEbP,MAAAA,KAAK,EAAEA,KAFM;AAGbgB,MAAAA,UAAU,EAAEP,mBAAmB,CAACQ,WAApB;AAHC,KAAf,CAFF;AAQD,GAbwB,EAatB,EAbsB,CAAzB;AAeA,QAAMC,MAAM,GAAGtB,WAAW,CAAC,MAAM;AAC/BK,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,2BAA2B,CAAC,IAAD,CAA3B;AACAE,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAO,IAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB;AACD,GALyB,EAKvB,EALuB,CAA1B;AAOAtB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,KAAK,IAAIE,wBAAb,EAAuC;AACrC,YAAMkB,aAAa,GAAGlB,wBAAwB,CAACS,OAAzB,KAAqC,IAAID,IAAJ,GAAWC,OAAX,EAA3D;AACAb,MAAAA,WAAW,GAAGuB,UAAU,CAACH,MAAD,EAASE,aAAT,CAAxB;AACD,KAHD,MAGO;AACLE,MAAAA,YAAY,CAACxB,WAAD,CAAZ;AACD;AACF,GAPQ,EAON,CAACE,KAAD,EAAQkB,MAAR,EAAgBhB,wBAAhB,CAPM,CAAT,CA3ByB,CAoCzB;AACA;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM0B,UAAU,GAAGT,IAAI,CAACU,KAAL,CAAWZ,YAAY,CAACa,OAAb,CAAqB,UAArB,CAAX,CAAnB;;AACA,QACEF,UAAU,IACVA,UAAU,CAACvB,KADX,IAEA,IAAIU,IAAJ,CAASa,UAAU,CAACP,UAApB,IAAkC,IAAIN,IAAJ,EAHpC,EAIE;AACAJ,MAAAA,KAAK,CAACiB,UAAU,CAACnB,MAAZ,EAAoBmB,UAAU,CAACvB,KAA/B,EAAsC,IAAIU,IAAJ,CAASa,UAAU,CAACP,UAApB,CAAtC,CAAL;AACD;AACF,GATQ,EASN,CAACV,KAAD,CATM,CAAT;AAWA,SAAO;AAAEN,IAAAA,KAAF;AAASM,IAAAA,KAAT;AAAgBY,IAAAA,MAAhB;AAAwBd,IAAAA;AAAxB,GAAP;AACH,CAlDM","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\nlet logoutTimer;\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(false);\n    const [tokenExpirationDateState, setTokenExpirationDateState] = useState();\n    const [userId, setUserId] = useState(false);\n  \n    const login = useCallback((uid, token, expirationDate) => {\n      setToken(token);\n      setUserId(uid);\n      const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n      setTokenExpirationDateState(tokenExpirationDate)\n      localStorage.setItem(\n        'userData', \n        JSON.stringify({ \n          userId: uid, \n          token: token,\n          expiration: tokenExpirationDate.toISOString() \n        })\n      );\n    }, []);\n  \n    const logout = useCallback(() => {\n      setToken(null);\n      setTokenExpirationDateState(null);\n      setUserId(null);\n      localStorage.removeItem('userData');\n    }, []);\n  \n    useEffect(() => {\n      if (token && tokenExpirationDateState) {\n        const remainingTime = tokenExpirationDateState.getTime() - new Date().getTime();\n        logoutTimer = setTimeout(logout, remainingTime);\n      } else {\n        clearTimeout(logoutTimer);\n      }\n    }, [token, logout, tokenExpirationDateState])\n  \n    // make sure useEffect is after login,\n    // still synchronous\n    useEffect(() => {\n      const storedData = JSON.parse(localStorage.getItem('userData'));\n      if (\n        storedData && \n        storedData.token &&\n        new Date(storedData.expiration) > new Date()\n      ) {\n        login(storedData.userId, storedData.token, new Date(storedData.expiration));\n      }\n    }, [login]);\n\n    return { token, login, logout, userId };\n}"]},"metadata":{},"sourceType":"module"}