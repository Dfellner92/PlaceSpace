{"ast":null,"code":"import { useState, useCallback, useRef, useEffect } from 'react'; // useCallback will ensure this hook doesn't get \n//infinitely rerendered.\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(); // useRef will store data across rerendered\n  //cycles\n\n  const activeHttpRequests = useRef([]);\n  const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const responseData = await response.json();\n      activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrl);\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      throw err;\n    }\n  }, []); // const clearError = () => {\n  //     setError(null)\n  // };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};","map":{"version":3,"sources":["/Users/danielfellner/Desktop/postBootcampProjects/Frontend/src/shared/hooks/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","responseData","json","filter","reqCtrl","ok","Error","message","err","forEach","abortCtrl","abort"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD,C,CAEA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC,CAF+B,CAI/B;AACA;;AACA,QAAMS,kBAAkB,GAAGP,MAAM,CAAC,EAAD,CAAjC;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAAC,OAC5BU,GAD4B,EAE5BC,MAAM,GAAG,KAFmB,EAG5BC,IAAI,GAAG,IAHqB,EAI5BC,OAAO,GAAG,EAJkB,KAK3B;AACDR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMS,aAAa,GAAG,IAAIC,eAAJ,EAAtB;AACAP,IAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,IAA3B,CAAgCH,aAAhC;;AACA,QAAI;AACA,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AAC9BC,QAAAA,MAD8B;AAE9BC,QAAAA,IAF8B;AAG9BC,QAAAA;AAH8B,OAAN,CAA5B;AAMA,YAAMO,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AAEAb,MAAAA,kBAAkB,CAACQ,OAAnB,GAA6BR,kBAAkB,CAACQ,OAAnB,CAA2BM,MAA3B,CACzBC,OAAO,IAAIA,OAAO,KAAKT,aADE,CAA7B;;AAIA,UAAI,CAACI,QAAQ,CAACM,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAUL,YAAY,CAACM,OAAvB,CAAN;AACH;;AAEDrB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOe,YAAP;AACH,KAnBD,CAmBE,OAAOO,GAAP,EAAY;AACVpB,MAAAA,QAAQ,CAACoB,GAAG,CAACD,OAAL,CAAR;AACArB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMsB,GAAN;AACH;AACJ,GAjC8B,EAiC5B,EAjC4B,CAA/B,CAR+B,CA2C/B;AACA;AACA;;AAEAzB,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACVM,MAAAA,kBAAkB,CAACQ,OAAnB,CAA2BY,OAA3B,CAAmCC,SAAS,IAAIA,SAAS,CAACC,KAAV,EAAhD;AACF,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAAE1B,IAAAA,SAAF;AAAaE,IAAAA,KAAb;AAAoBG,IAAAA;AAApB,GAAP;AACH,CAtDM","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\n\n// useCallback will ensure this hook doesn't get \n//infinitely rerendered.\nexport const useHttpClient = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState();\n\n    // useRef will store data across rerendered\n    //cycles\n    const activeHttpRequests = useRef([]);\n    \n    const sendRequest = useCallback(async (\n        url, \n        method = 'GET', \n        body = null, \n        headers = {}\n    ) => {\n        setIsLoading(true);\n        const httpAbortCtrl = new AbortController();\n        activeHttpRequests.current.push(httpAbortCtrl);\n        try {\n            const response = await fetch(url, {\n                method,\n                body,\n                headers\n            });\n    \n            const responseData = await response.json();\n           \n            activeHttpRequests.current = activeHttpRequests.current.filter(\n                reqCtrl => reqCtrl !== httpAbortCtrl\n            );\n\n            if (!response.ok) {\n                throw new Error(responseData.message);\n            }\n\n            setIsLoading(false);\n            return responseData;\n        } catch (err) {\n            setError(err.message);\n            setIsLoading(false);\n            throw err;\n        }\n    }, []);\n\n    // const clearError = () => {\n    //     setError(null)\n    // };\n\n    useEffect(() => {\n        return () => {\n           activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort()); \n        };\n    }, []);\n\n    return { isLoading, error, sendRequest }\n};"]},"metadata":{},"sourceType":"module"}