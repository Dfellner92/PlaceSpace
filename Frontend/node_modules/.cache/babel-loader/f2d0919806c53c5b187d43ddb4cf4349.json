{"ast":null,"code":"var _jsxFileName = \"/Users/danielfellner/Desktop/postBootcampProjects/Frontend/src/places/pages/UpdatePlace.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './PlaceForm.css';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const placeId = useParams().placeId;\n  const history = useHistory();\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`);\n        setLoadedPlace(responseData.place);\n        setFormData({\n          title: {\n            value: responseData.place.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.place.description,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n\n    try {\n      await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`, 'PATCH', JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value\n      }), {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + auth.token\n      });\n      history.push('/' + auth.userId + '/places');\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  if (!loadedPlace && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, \"Could not find place!\")));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), !isLoading && loadedPlace && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.title,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.description,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, \"UPDATE PLACE\")));\n};\n\nexport default UpdatePlace;","map":{"version":3,"sources":["/Users/danielfellner/Desktop/postBootcampProjects/Frontend/src/places/pages/UpdatePlace.js"],"names":["React","useEffect","useState","useContext","useParams","useHistory","Input","Button","Card","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","useHttpClient","AuthContext","LoadingSpinner","ErrorModal","UpdatePlace","auth","isLoading","error","sendRequest","clearError","loadedPlace","setLoadedPlace","placeId","history","formState","inputHandler","setFormData","title","value","isValid","description","fetchPlace","responseData","process","env","REACT_APP_BACKEND_URL","place","err","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport './PlaceForm.css';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\n\nconst UpdatePlace = () => {\n    const auth = useContext(AuthContext);\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n    const [loadedPlace, setLoadedPlace] = useState();\n    const placeId = useParams().placeId;\n    const history = useHistory();\n    \n    const [formState, inputHandler, setFormData] = useForm({\n        title: {\n            value: '',\n            isValid: false\n        },\n        description: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    useEffect(() => {\n        const fetchPlace = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\n                );\n                setLoadedPlace(responseData.place)\n                setFormData(\n                    {\n                        title: {\n                            value: responseData.place.title,\n                            isValid: true\n                        },\n                        description: {\n                            value: responseData.place.description,\n                            isValid: true\n                        }\n                    },\n                    true\n                );\n            } catch (err) {}\n        };\n        fetchPlace();\n    }, [sendRequest, placeId, setFormData]);\n\n    const placeUpdateSubmitHandler = async event => {\n        event.preventDefault();\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n                'PATCH',\n                JSON.stringify({\n                    title: formState.inputs.title.value,\n                    description: formState.inputs.description.value\n                }),\n                {\n                    'Content-Type': 'application/json',\n                    Authorization: 'Bearer ' + auth.token\n                }\n            );\n            history.push('/' + auth.userId + '/places');\n        } catch (err) {}\n    };\n\n    if (isLoading) {\n        return (\n            <div className=\"center\">\n                <LoadingSpinner />\n            </div>\n        )\n    }\n\n    if (!loadedPlace && !error) {\n        return (\n            <div className=\"center\">\n                <Card>\n                    <h2>Could not find place!</h2>\n                </Card>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            {!isLoading && loadedPlace && (\n                <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n                    <Input\n                    id=\"title\"\n                    element=\"input\"\n                    type=\"text\"\n                    label=\"Title\"\n                    validators={[VALIDATOR_REQUIRE()]}\n                    errorText=\"Please enter a valid title.\"\n                    onInput={inputHandler}\n                    initialValue={loadedPlace.title}\n                    initialValid={true}\n                    />\n                    <Input\n                    id=\"description\"\n                    element=\"textarea\"\n                    label=\"Description\"\n                    validators={[VALIDATOR_MINLENGTH(5)]}\n                    errorText=\"Please enter a valid description (min. 5 characters).\"\n                    onInput={inputHandler}\n                    initialValue={loadedPlace.description}\n                    initialValid={true}\n                    />\n                    <Button type=\"submit\" disabled={!formState.isValid}>\n                        UPDATE PLACE\n                    </Button>\n                </form>)}\n        </React.Fragment>\n    );\n};\n\nexport default UpdatePlace;\n"]},"metadata":{},"sourceType":"module"}